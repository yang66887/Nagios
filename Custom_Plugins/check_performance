#!/bin/bash

# 调用示例
# $USER1$/monitor $_HOSTPROXY$ $_SERVICENODE$ $HOSTADDRESS$ $_HOSTPORT$ $USER4$ $USER5$ $USER6$ $_SERVICEPATH$ $_SERVICEWARNING$ $_SERVICECRITICAL$ $_SERVICEUNIT$

# 插件路径
plugins='/usr/local/nagios/libexec'
ncpa="${plugins}/check_ncpa"

# 帮助以及错误信息
dep_msg(){
  echo 'Dependences Error.'
  exit 3
}

help_msg(){
  echo "$0 Proxy Node NCPA_Address Port Influxdb_Address:Influxdb_Port Influxdb_User:Influxdb_Password NCPA_Token NCPA_Metrics Warning_Value Critical_Value [NCPA_Unit]"
  exit 0
}

error_msg(){
  echo 'Args Error.'
  exit 3
}

# 接收传参
Proxy="${1}"
Node="${2}"
Host="${3}"
Client="${4}"
Port="${5}"
Influx_URL="${6}"
Influx_Auth="${7}"

# 是否使用代理
[ ${Proxy} -eq 1 ] && PROXY="/${Client}"

# 校验传参
case ${Node} in
  host)
    [ $# -eq 10 ] || error_msg
    NCPA_Token="${8}"
    Plugin="${9}"
    [ ${Proxy} -eq 1 ] && PROXY="/${10}"
    ;;
  website)
    [ $# -eq 15 ] || error_msg
    NCPA_Token="${8}"
    HTTP_Proxy="${9}"
    HTTP_Proto="${10}"
    HTTP_Port="${11}"
    HTTP_Auth="${12}"
    HTTP_Url="${13}"
    HTTP_SSL=${14}
    HTTP_Name="${15}"
    ;;
  mysql_status)
    [ $# -eq 12 ] || error_msg
    NCPA_Token="${8}"
    MYSQL_Port="${9}"
    MYSQL_User="${10}"
    MYSQL_Pwd="${11}"
    MYSQL_Mode="${12}"
    ;;
  mysql_health)
    [ $# -eq 12 ] || error_msg
    MYSQL_User="${8}"
    MYSQL_Pwd="${9}"
    MYSQL_Health="${10}"
    Warning="${11}"
    Critical="${12}"
    ;;
  mysql_data)
    [ $# -eq 16 ] ||error_msg
    NCPA_Token="${8}"
    MYSQL_Port="${9}"
    MYSQL_User="${10}"
    MYSQL_Pwd="${11}"
    MYSQL_Database="${12}"
    MYSQL_Data="${13}"
    MYSQL_Select="SQL_${14}"
    MYSQL_Comment="${15}"
    MYSQL_Unit="${16}"
    ;;
  cpu|memory|disk|IO|interface|system)
    [ $# -eq 12 ] || error_msg
    NCPA_Token="${8}"
    NCPA_Path="${9}"
    Warning="${10}"
    Critical="${11}"
    Unit="${12}"
    ;;
  load)
    [ $# -eq 11 ] || error_msg
    NCPA_Token="${8}"
    Warning="${9}"
    Critical="${10}"
    PLUGIN_Args="$(echo _${11}|sed 's/ /_/g')"
    ;;
  processes)
    [ $# -eq 8 ] || error_msg
    NCPA_Token="${8}"
esac

# 检测依赖
[ $(${ncpa} -V &>/dev/null;echo $?) -eq 0 ] || dep_msg
[ $(which curl &>/dev/null;echo $?) -eq 0 ] || dep_msg
[ $(which mysql &>/dev/null;echo $?) -eq 0 ] || dep_msg
[ $(which /usr/bin/python &>/dev/null;echo $?) -eq 0 ] || dep_msg

# python求和
py_sum(){
  Arr="(0,$1)"
  /usr/bin/python <<EOF
# -*- coding: UTF-8 -*-
Arr = ${Arr}
print(sum(Arr))
EOF
}

# python获取Influxdb value
py_json_value(){
  if [ $(echo $1|grep ^\{.*\}$|wc -l) -eq 0 ];then
    echo 0
    return 1
  else
    /usr/bin/python <<EOF
# -*- coding: UTF-8 -*-
try:
  value=$1['results'][0]['series'][0]['values'][0][1]
except Exception:
  value=0
if isinstance(value,(int)):
  print(value)
elif isinstance(value,(float)):
  print("%.2f" % value)
else:
  print(value)
EOF
    return 0
  fi
}

# python检查是否为数字
py_isdigit(){
  str="$1"
  /usr/bin/python <<EOF
# -*- coding: UTF-8 -*-
Str = '${str}'
if len(Str) == 0:
  print('2')
elif Str.replace('.', '').isdigit():
  print('0')
else:
  print('1')
EOF
}

# 将json格式的进程列表信息格式化为Influxdb可写入的格式
py_processes_list_format(){
  json="$1"
  /usr/bin/python <<EOF
# -*- coding: UTF-8 -*-

import os
import sys
import json
import random
import string
from sys import version_info

if version_info.major == 2:
  reload(sys)
  sys.setdefaultencoding('utf-8')

content = ${json}
temp_file = ''.join(random.sample(string.ascii_letters + string.digits, 12))
temp_file = '/usr/local/nagios/var/' + temp_file

for i in range(len(content['processes'])):
  UserName = content['processes'][i]['username']
  PID = content['processes'][i]['pid']
  Name = content['processes'][i]['name']
  MEM_Percent = content['processes'][i]['mem_percent'][0]
  CPU_Percent = content['processes'][i]['cpu_percent'][0]
  Exec = content['processes'][i]['cmd']
  if not Exec:
    Exec = "Unknown"
  with open(temp_file, "a") as file:
    file.write("Processes_List,Host=${Client},")
    file.write("i_PID=" + str(PID) + ",")
    if j_UserName.find(" "):
      file.write("j_UserName=\"" + UserName + "\",")
    else:
      file.write("j_UserName=" + UserName + ",")
    if k_Name.find(" "):
      file.write("k_Name=\"" + Name + "\" ")
    else:
      file.write("k_Name=" + Name + " ")
    file.write("l_CPU_Percent=" + str(CPU_Percent) + ",")
    file.write("m_MEM_Percent=" + str(MEM_Percent) + ",")
    file.write("n_Exec=\"" + Exec + "\"\n")

print(temp_file)
EOF
}

# 比对数字大小
digital_compare(){
  # 检查入参个数
  if [ $# -eq 3 ];then
    # 检查result值是否为数字
    value1=$(py_isdigit $1)
    # 检查warning值是否为数字
    value2=$(py_isdigit $2)
    # 检查critical值是否为数字
    value3=$(py_isdigit $3)
    if [ ${value1} -eq 0 -a ${value2} -eq 0 -a ${value3} -eq 0 ];then
      # 根据大小决定返回值
      if [ $(echo ${1} ${2}|awk '{print $1<$2}') -eq 1 ];then
        return 0
      elif [ $(echo ${1} ${2}|awk '{print $1>=$2}') -eq 1 -a $(echo ${1} ${3}|awk '{print $1<$2}') -eq 1 ];then
        return 1
      else
        return 2
      fi
    else
      return 2
    fi
  else
    return 2
  fi
}

# 查询Influxdb存储的MySQL Status值
influx_mysql_status(){
  py_json_value $(curl -s -u "${Influx_Auth}" -G "http://${Influx_URL}/query?pretty=false"\
  --data-urlencode "db=nagios_perfdata"\
  --data-urlencode "q=select last($1) from MySQL_Status where (Host='${Client}')")
  return $?
}

check_host(){
  case ${Plugin} in
    ping)
      if [ ${Proxy} -eq 0 ];then
        # 执行检查并存储检查结果
        result="$(${plugins}/check_ping -H${Host} -w 3000.0,80% -c 5000.0,100% -p 5)"
        # 存储检查返回值
        return_code=$?
      elif [ ${Proxy} -eq 1 ];then
        # 执行检查并存储检查结果
        result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
        -M "plugins/nagios_plugins/check_ping/-H${Client}_-w3000.0,80%_-c5000.0,100%_-p5${PROXY}")
        # 存储检查返回值
        return_code=$?
      fi
      # 0: Host Up; 1~: Host Down
      HOST_status=${return_code}
      # 分离并存储检查结果中部分信息
      Packet_loss=$(echo ${result}|sed 's/.*pl=\(.*\)%;.*/\1/g')
      Response_time=$(echo ${result}|sed 's/.*rta=\(.*\)ms.*/\1/g')
      ;;
    tcp)
      if [ ${Proxy} -eq 0 ];then
        # 执行检查并存储检查结果
        result="$(${plugins}/check_tcp -H${Host} -p${Port} -t5)"
        # 存储检查返回值
        return_code=$?
      elif [ ${Proxy} -eq 1 ];then
        # 执行检查并存储检查结果
        result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
        -M "plugins/nagios_plugins/check_tcp/-H${Client}_-p${Port}${PROXY}")
        # 存储检查返回值
        return_code=$?
      fi
      # 0: Host Up; 1~: Host Down
      HOST_status=${return_code}
      # 分离并存储检查结果中部分信息
      if [ ${return_code} -eq 0 ];then
        Packet_loss=0
        Response_time=$(echo ${result}|sed 's/.*time=\(.*\)s.*/\1/g'|awk '{print $1*1000}')
      else
        Packet_loss=100
        Response_time=5000
      fi
      ;;
    *)
      echo error
  esac

  # 将检查结果写入 Influxdb
  curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Host_Status,\
Host=${Client},\
i_Time_Unit=ms,\
j_loss_Unit=% \
k_Host_Status=${HOST_status},\
l_Packet_Loss=${Packet_loss},\
m_Response_Time=${Response_time}" \
&>/dev/null

  # 输出检查结果
  echo ${result}

  # 退出脚本
  exit ${return_code}
}

check_cpu(){
  # 执行检查并存储检查结果
  result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
  -M "${Node}/${NCPA_Path}${PROXY}" -q "aggregate=${Unit}" -w ${Warning} -c ${Critical})

  # 存储检查返回值
  return_code=$?

  # 分离并存储检查结果中的部分数值
  CPU_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  CPU_percent="$(echo ${result}|awk '{print $4}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Cpu_Usage,\
Host=${Client},\
i_Cpu_Status=${CPU_status},\
k_Cpu_Unit=% \
j_Cpu_Percent=${CPU_percent}" \
&>/dev/null

  # 输出检查结果
  echo ${result}

  # 退出脚本
  exit ${return_code}
}

check_mem(){
  # 执行检查并存储检查结果
  result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
  -M "${Node}/${NCPA_Path}${PROXY}" -w ${Warning} -c ${Critical} -u ${Unit})

  # 存储检查返回值
  return_code=$?

  # 分离并存储检查结果中的部分数值
  Memory_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  Memory_max="$(echo ${result}|awk '{print $11}')"
  Memory_used="$(echo ${result}|awk '{print $17}')"
  Memory_percent="$(echo ${result}|awk '{print $5}')"
  Memory_available="$(echo ${result}|awk '{print $8}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Memory_Usage,\
Host=${Client},\
i_Memory_Status=${Memory_status},\
o_Memory_Percent_unit=%,\
m_Memory_Unit=${Unit}B \
j_Memory_Max=${Memory_max},\
k_Memory_Used=${Memory_used},\
l_Memory_Available=${Memory_available},\
n_Memory_Percent=${Memory_percent}" \
&>/dev/null

  # 输出检查结果
  echo ${result}

  # 退出脚本
  exit ${return_code}
}

check_disk(){
  # 按照NCPA标准修改磁盘路径字符串(Linux修改 / 为 |, Windows盘符添加 :|)
  mount_point="$(echo ${NCPA_Path}|sed -e 's/\//|/g' -e 's/^\([a-zA-Z]\)$/\1:|/g')"

  # 执行检查并存储检查结果
  result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
  -M "${Node}/logical/${mount_point}${PROXY}" -w ${Warning} -c ${Critical} -u ${Unit})

  # 存储检查返回值
  return_code=$?

  # 分离并存储检查结果中的部分数值
  Disk_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  Disk_max="$(echo ${result}|awk '{print $15}')"
  Disk_used="$(echo ${result}|awk '{print $9}')"
  Disk_free="$(echo ${result}|awk '{print $12}')"
  Disk_percent="$(echo ${result}|awk '{print $6}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Disk_Usage,\
Host=${Client},\
j_Disk_Status=${Disk_status},\
i_Partition_Name=${NCPA_Path},\
p_Disk_Percent_Unit=%,\
n_Disk_Unit=${Unit}B \
k_Disk_Max=${Disk_max},\
l_Disk_Used=${Disk_used},\
m_Disk_Free=${Disk_free},\
o_Disk_Percent=${Disk_percent}" \
&>/dev/null

  # 输出检查结果
  echo ${result}

  # 退出脚本
  exit ${return_code}
}

check_IO(){
  # 分离并存储NCPA_Path参数中的磁盘名称
  drive="$(echo ${NCPA_Path}|awk -F/ '{print $1}')"

  # 执行检查并存储检查结果
  result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
  -M "disk/physical/${NCPA_Path}${PROXY}" -w ${Warning} -c ${Critical} -u ${Unit} -d)

  # 存储检查返回值
  return_code=$?

  # 分离并存储检查结果中的部分数值
  IO_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  IO_type="$(echo ${result}|awk '{print $2}')"
  IO_current="$(echo ${result}|awk '{print $4}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Disk_IO,\
Host=${Client},\
j_IO_Status=${IO_status},\
i_Drive_Name=${drive},\
k_IO_Type=${IO_type},\
m_IO_Unit=${Unit}B/s \
l_IO_Value=${IO_current}" \
&>/dev/null

  # 输出检查结果
  echo ${result}

  # 退出脚本
  exit ${return_code}
}

check_interface(){
  # 执行检查并存储检查结果
  result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
  -M "${Node}/${NCPA_Path}${PROXY}" -w ${Warning} -c ${Critical} -u ${Unit} -d)

  # 存储检查返回值
  return_code=$?

  # 分离并存储检查结果中的部分数值
  Traffic_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  Traffic_type="$(echo ${result}|awk '{print $2}')"
  Traffic_current="$(echo ${result}|awk '{print $4}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Interface_Usage,\
Host=${Client},\
i_Traffic_Status=${Traffic_status},\
j_Traffic_Type=${Traffic_type},\
l_Traffic_Unit=${Unit}B/s \
k_Traffic_Current=${Traffic_current}" \
&>/dev/null

  # 输出检查结果
  echo ${result}

  # 退出脚本
  exit ${return_code}
}

check_load(){
  # 校验参数
  [ "X${PLUGIN_Args}" == 'X_NULL' ] && PLUGIN_Args=''

  # 执行检查并存储检查结果
  result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
  -M "plugins/nagios_plugins/check_load/-w_${Warning}_-c_${Critical}${PLUGIN_Args}${PROXY}")

  # 存储检查返回值
  return_code=$?

  # 分离并存储检查结果中的部分数值
  Load_1="$(echo ${result}|awk -F\| '{print $1}'|awk '{print $5}'|sed 's/,//g')"
  Load_5="$(echo ${result}|awk -F\| '{print $1}'|awk '{print $6}'|sed 's/,//g')"
  Load_15="$(echo ${result}|awk -F\| '{print $1}'|awk '{print $7}')"
  Load_Status="$(echo ${result}|awk '{print $1}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Cpu_Load,\
Host=${Client},\
i_Status=${Load_Status} \
j_Load_1=${Load_1},\
k_Load_5=${Load_5},\
l_Load_15=${Load_15}" \
&>/dev/null

  # 输出检查结果
  echo ${result}

  # 退出脚本
  exit ${return_code}
}

check_website(){
  case ${HTTP_Proto} in
    http)
      ARGs=''
      if [ ${Proxy} -eq 0 ];then
        # 校验参数
        [ "X${HTTP_Auth}" != "XNULL" ] && ARGs="$(echo ${ARGs} -a${HTTP_Auth})"
        [ "X${HTTP_Url}" != "XNULL" ] && ARGs="$(echo ${ARGs} -u${HTTP_Url})"
        [ ${HTTP_SSL} -eq 1 ] && ARGs="$(echo ${ARGs} -S})"
        # 执行检查并存储检查结果
        result=$(${plugins}/check_http -H${Host} -p${HTTP_Port} ${ARGs})
        # 存储检查返回值
        return_code=$?
      elif [ ${Proxy} -eq 1 ];then
        PROXY="/${HTTP_Proxy}"
        # 校验参数
        [ "X${HTTP_Auth}" != "XNULL" ] && ARGs="$(echo ${ARGs}_-a${HTTP_Auth})"
        [ "X${HTTP_Url}" != "XNULL" ] && HTTP_Url="$(echo ${HTTP_Url}|sed 's/\//|/g')" && ARGs="$(echo ${ARGs}_-u${HTTP_Url})"
        [ ${HTTP_SSL} -eq 1 ] && ARGs="$(echo ${ARGs}_-S})"
        # 执行检查并存储检查结果
        result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
        -M "plugins/nagios_plugins/check_http/-H${Client}_-p${HTTP_Port}${ARGs}${PROXY}")
        # 存储检查返回值
        return_code=$?
      fi
      if [ $(echo ${result}|grep ^HTTP|wc -l) -eq 1 ];then
        # 分离并存储检查结果中的部分数值
        Http_Status="$(echo ${result}|awk '{print $2}'|sed 's/://g')"
        Http_Code="$(echo ${result}|awk '{print $4}')"
        Response_Time="$(echo ${result}|sed 's/.*|time=\([0-9.]*\)s.*/\1/g')"
      fi
      ;;
    tcp)
      if [ ${Proxy} -eq 0 ];then
        # 执行检查并存储检查结果
        result=$(${plugins}/check_tcp -H${Host} -p${HTTP_Port})
        # 存储检查返回值
        return_code=$?
      elif [ ${Proxy} -eq 1 ];then
        PROXY="/${HTTP_Proxy}"
        # 执行检查并存储检查结果
        result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
        -M "plugins/nagios_plugins/check_tcp/-H${Client}_-p${HTTP_Port}${PROXY}")
        # 存储检查返回值
        return_code=$?
      fi
      if [ ${return_code} -eq 0 ];then
        Http_Status='OK'
        Http_Code=200
        Response_Time="$(echo ${result}|sed 's/.*time=\(.*\)s.*/\1/g')"
      else
        Http_Status='CRITICAL'
        Http_Code=500
        Response_Time=5
      fi
  esac

  if [ $(py_isdigit ${Http_Code}) -eq 0 ];then
    # 将检查结果写入 Influxdb
    curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
    --data-binary "\
Web_Status,\
Host=${Client},\
i_Web_Name=${HTTP_Name},\
j_Web_Port=${HTTP_Port},\
k_Protocol=${HTTP_Proto},\
o_Response_Time_Unit=s \
l_Web_Status=\"${Http_Status}\",\
m_Http_Code=${Http_Code},\
n_Response_Time=${Response_Time}" \
&>/dev/null
  fi

  # 输出检查结果
  echo ${result}

  # 退出脚本
  exit ${return_code}
}

check_mysql_status(){
  case ${Proxy} in
    0)
      # 获取MySQL Status数据
      MySQL_Status="$(mysql --html --ssl-mode=disabled -h${Host} -P${MYSQL_Port} -u${MYSQL_User} -p${MYSQL_Pwd} -e"\
show global status where Variable_name regexp '\
uptime$|\
questions|\
slow_queries|\
threads_connected|\
threads_cached|\
threads_created|\
com_commit|\
com_rollback$|\
innodb_buffer_pool_pages_dirty|\
innodb_buffer_pool_pages_free|\
innodb_buffer_pool_pages_total|\
innodb_buffer_pool_reads|\
innodb_buffer_pool_read_requests|\
bytes_sent|\
bytes_received|\
table_locks_|\
innodb_rows_';" 2>/dev/null)"
      # 记录返回值
      return_code=$?
      # 检查返回值，MySQL OK：0
      [ ${return_code} -ne 0 ] && echo '数据库状态异常，请尽快检查！' && exit ${return_code}
      # 获取MySQL版本
      MySQL_Version="$(mysql --ssl-mode=disabled -h${Host} -P${MYSQL_Port} -u${MYSQL_User} -p${MYSQL_Pwd} -e 'select version();' 2>/dev/null|tail -1)"
      # 获取MySQL Slave节点状态
      if [ ${MYSQL_Mode} -eq 1 ];then
        Slave_Status="$(mysql --ssl-mode=disabled -h${Host} -P${MYSQL_Port} -u${MYSQL_User} -p${MYSQL_Pwd} -e"show slave status\G;" 2>/dev/null|grep -Eo 'Slave_.*_Running:.*|Seconds_Behind_Master:.*')"
      fi
      ;;
    1)
      # 获取MySQL Status数据
      MySQL_Status="$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}" -M "plugins/check_mysql/status/${Client}/${MYSQL_Port}${PROXY}")"
      # 记录返回值
      return_code=$?
      # 检查返回值，MySQL OK：0
      [ ${return_code} -ne 0 ] && echo '数据库状态异常，请尽快检查！' && exit ${return_code}
      # 获取MySQL版本
      MySQL_Version="$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}" -M "plugins/check_mysql/version/${Client}/${MYSQL_Port}${PROXY}")"
      # 获取MySQL Slave节点状态
      if [ ${MYSQL_Mode} -eq 1 ];then
        Slave_Status="$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}" -M "plugins/check_mysql/slave/${Client}/${MYSQL_Port}${PROXY}")"
      fi
  esac

  # 将MySQL Status数据格式化并导入为变量
  MySQL_Status=$(echo ${MySQL_Status}|sed -e 's/<TR><TD>/\n/g' -e 's/<\/TD><TD>/=/g'|sed -e 's/<.*>$//g' -e '/^$/d')
  export $(echo ${MySQL_Status})

  # 拼接MySQL版本号
  MySQL_Version="MySQL_${MySQL_Version}"

  # 检查并存储从库同步状态，主库：MYSQL_Mode = 0，从库：MYSQL_Mode = 1
  if [ ${MYSQL_Mode} -eq 1 ];then
    Slave_Status="$(echo ${Slave_Status}|sed -e 's/: /=/g' -e 's/=\([A-Za-z]*\) /="\1" /g'|tr ' ' ',')"
  else
    Slave_Status='Slave_IO_Running="NULL",Slave_SQL_Running="NULL",Seconds_Behind_Master=0'
  fi

  # 获取上一次检查Uptime数值
  Last_Uptime=$(influx_mysql_status Uptime)

  # 检查MySQL是否重启 或 InfluxDB中是否有存储MySQL Status数据
  if [ $(echo ${Uptime} ${Last_Uptime}|awk '{print $1<$2}') -eq 1 -o ${Last_Uptime} -eq 0 ];then
    # 如重启过或无数据，则将部分状态上次检查数据置零
    Last_Uptime=0
    Last_Bytes_received=0
    Last_Bytes_sent=0
    Last_Questions=0
    Last_Slow_queries=0
    Last_Com_commit=0
    Last_Com_rollback=0
    Last_Innodb_rows_read=0
    Last_Innodb_rows_inserted=0
    Last_Innodb_rows_deleted=0
    Last_Innodb_rows_updated=0
  else
    # 如未重启且有数据，则获取部分状态上次检查数据
    Last_Bytes_received=$(influx_mysql_status Bytes_received)
    Last_Bytes_sent=$(influx_mysql_status Bytes_sent)
    Last_Questions=$(influx_mysql_status Questions)
    Last_Slow_queries=$(influx_mysql_status Slow_queries)
    Last_Com_commit=$(influx_mysql_status Com_commit)
    Last_Com_rollback=$(influx_mysql_status Com_rollback)
    Last_Innodb_rows_read=$(influx_mysql_status Innodb_rows_read)
    Last_Innodb_rows_inserted=$(influx_mysql_status Innodb_rows_inserted)
    Last_Innodb_rows_deleted=$(influx_mysql_status Innodb_rows_deleted)
    Last_Innodb_rows_updated=$(influx_mysql_status Innodb_rows_updated)
  fi

  # 锁表率
  Table_locks_percent=$(echo ${Table_locks_waited} ${Table_locks_waited} ${Table_locks_immediate}|\
  awk '{printf "%0.2f\n",$1/($2+$3)*100}')

  # 每秒查询数
  QPS=$(echo ${Questions} ${Last_Questions} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # 每秒事务数
  TPS=$(echo ${Com_commit} ${Last_Com_commit} ${Com_rollback} ${Last_Com_rollback} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",(($1-$2)+($3-$4))/($5-$6)}')

  # 每秒慢查询数
  Slow_queries_per_sec=$(echo ${Slow_queries} ${Last_Slow_queries} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # 每秒接收字节数
  Bytes_received_per_sec=$(echo ${Bytes_received} ${Last_Bytes_received} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # 每秒发送字节数
  Bytes_sent_per_sec=$(echo ${Bytes_sent} ${Last_Bytes_sent} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # InnoDB读命中率
  Innodb_reads_hitrate=$(echo ${Innodb_buffer_pool_reads} ${Innodb_buffer_pool_read_requests}|\
  awk '{printf "%0.2f\n",(1-$1/$2)*100}')

  # InnoDB使用率
  Innodb_use_rate=$(echo ${Innodb_buffer_pool_pages_free} ${Innodb_buffer_pool_pages_total}|\
  awk '{printf "%0.2f\n",(1-$1/$2)*100}')

  # InnoDB脏块率
  Innodb_dirty_rate=$(echo ${Innodb_buffer_pool_pages_dirty} ${Innodb_buffer_pool_pages_total}|\
  awk '{printf "%0.2f\n",$1/$2*100}')

  # InnoDB每秒查询次数
  Innodb_rows_read_per_sec=$(echo ${Innodb_rows_read} ${Last_Innodb_rows_read} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # InnoDB每秒插入次数
  Innodb_rows_inserted_per_sec=$(echo ${Innodb_rows_inserted} ${Last_Innodb_rows_inserted} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # InnoDB每秒删除次数
  Innodb_rows_deleted_per_sec=$(echo ${Innodb_rows_deleted} ${Last_Innodb_rows_deleted} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # InnoDB每秒更新次数
  Innodb_rows_updated_per_sec=$(echo ${Innodb_rows_updated} ${Last_Innodb_rows_updated} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # 将检查结果写入 Influxdb
  curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
  --data-binary "\
MySQL_Status,\
Host=${Client},\
MySQL_Port=${MYSQL_Port},\
MySQL_Mode=${MYSQL_Mode},\
MySQL_Status=${return_code} \
Uptime=${Uptime},\
MySQL_Version=\"${MySQL_Version}\",\
Questions=${Questions},\
Slow_queries=${Slow_queries},\
Slow_queries_per_sec=${Slow_queries_per_sec},\
Threads_connected=${Threads_connected},\
Threads_cached=${Threads_cached},\
Threads_created=${Threads_created},\
Table_locks_percent=${Table_locks_percent},\
Bytes_received=${Bytes_received},\
Bytes_received_per_sec=${Bytes_received_per_sec},\
Bytes_sent=${Bytes_sent},\
Bytes_sent_per_sec=${Bytes_sent_per_sec},\
Com_commit=${Com_commit},\
Com_rollback=${Com_rollback},\
Innodb_buffer_pool_pages_dirty=${Innodb_buffer_pool_pages_dirty},\
Innodb_buffer_pool_pages_free=${Innodb_buffer_pool_pages_free},\
Innodb_buffer_pool_pages_total=${Innodb_buffer_pool_pages_total},\
Innodb_buffer_pool_read_requests=${Innodb_buffer_pool_read_requests},\
Innodb_buffer_pool_reads=${Innodb_buffer_pool_reads},\
Innodb_rows_deleted=${Innodb_rows_deleted},\
Innodb_rows_inserted=${Innodb_rows_inserted},\
Innodb_rows_read=${Innodb_rows_read},\
Innodb_rows_updated=${Innodb_rows_updated},\
QPS=${QPS},\
TPS=${TPS},\
Innodb_reads_hitrate=${Innodb_reads_hitrate},\
Innodb_use_rate=${Innodb_use_rate},\
Innodb_dirty_rate=${Innodb_dirty_rate},\
Innodb_rows_read_per_sec=${Innodb_rows_read_per_sec},\
Innodb_rows_inserted_per_sec=${Innodb_rows_inserted_per_sec},\
Innodb_rows_deleted_per_sec=${Innodb_rows_deleted_per_sec},\
Innodb_rows_updated_per_sec=${Innodb_rows_updated_per_sec},\
${Slave_Status}" \
&>/dev/null

  # 输出检查结果
  echo "Version:${MySQL_Version};Uptime:${Uptime}s;Threads_connected:${Threads_connected};Questions:${Questions};QPS:${QPS};TPS:${TPS};Slow_queries:${Slow_queries_per_sec}/s"

  # 退出脚本
  exit ${return_code}
}

check_mysql_health(){
  # 执行检查并存储检查结果
  result=$(influx_mysql_status ${MYSQL_Health})

  # 存储返回值
  return_code=$?

  if [ ${return_code} -eq 0 ];then
    case ${MYSQL_Health} in
      # 当前锁表率
      Table_locks_percent)
        digital_compare ${result} ${Warning} ${Critical}
        # 存储返回值
        return_code=$?
        comment="当前锁表率：${result}%"
        ;;
      # 已用连接数
      Threads_connected)
        digital_compare ${result} ${Warning} ${Critical}
        # 存储返回值
        return_code=$?
        comment="当前已使用连接数：${result}"
        ;;
      # 每秒慢查询
      Slow_queries_per_sec)
        digital_compare ${result} ${Warning} ${Critical}
        # 存储返回值
        return_code=$?
        comment="平均每秒慢查询：${result}"
        ;;
      # 从库数据与主库数据时间差
      Seconds_Behind_Master)
        digital_compare ${result} ${Warning} ${Critical}
        # 存储返回值
        return_code=$?
        comment="当前从库与主库数据时间差：${result}秒"
        ;;
      # 从库状态
      Slave_IO_Running|Slave_SQL_Running)
        if [ "X${result}" == "XYes" ];then
          return_code=0
        else
          return_code=2
        fi
        comment="从库${MYSQL_Health}状态：${result}"
    esac
  else
    comment='查询异常，请检查service配置！'
  fi

  # 输出检查结果
  echo ${comment}

  # 退出脚本
  exit ${return_code}
}

check_mysql_data(){
  case ${Proxy} in
    0)
      # 加载SQL语句定义文件
      source /usr/local/nagios/etc/data_sql.list || error_msg
      # 执行查询语句并存储查询结果
      result=$(mysql -h${Host} -P${MYSQL_Port} -u"${MYSQL_User}" -p"${MYSQL_Pwd}" -D"${MYSQL_Database}" -e "${!MYSQL_Select}" 2>/dev/null)
      # 存储返回值
      return_code=$?
      ;;
    1)
      # 执行查询语句并存储查询结果
      result="$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}" -M "plugins/check_mysql/data/${Client}/${MYSQL_Port}/${MYSQL_Database}/${MYSQL_Select}${PROXY}")"
      # 记录返回值
      return_code=$?
  esac
  # 根据返回值判断查询是否成功
  if [ ${return_code} -eq 0 ];then
    # 过滤查询结果
    result=$(echo ${result}|awk '{print $NF}'|tail -1)
    # 检查查询结果是否为数字
    check_code=$(py_isdigit ${result})
    # 查询结果为数字
    if [ ${check_code} -eq 0 ];then
      # 特定SQL语句1告警条件
      if [ ${MYSQL_Select} == 'SQL_xxxxx' ];then
        comment='PASS'
      # 特定SQL语句2告警条件
      elif [ ${MySQL_Select} == 'SQL_yyyy' ];then
        comment='PASS'
      # 默认为业务数据，判定条件：查询结果为0时发送告警
      else
        comment="${MYSQL_Comment}: ${result}${MYSQL_Unit}"
        [ ${result} -eq 0 ] && return_code=1
      fi
      # 将检查结果写入 Influxdb
      curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
      --data-binary "\
Business_Data,\
Host=${Client},\
i_Data_Name=${MYSQL_Data},\
j_Data_Status=${return_code},\
k_Data_Comment=${MYSQL_Comment},\
l_Data_Unit=${MYSQL_Unit} \
m_Data_Value=${result}" \
&>/dev/null
    # 查询结果为非数字
    else
      comment='查询结果异常，请确认SQL语句是否正确！'
      return_code=1
    fi
  # 查询失败
  else
    comment='查询异常，请确认数据库是否启动或者SQL语句是否正确！'
    return_code=2
  fi

  # 输出检查结果
  echo ${comment}

  # 退出脚本
  exit ${return_code}
}

system_info(){
  case ${NCPA_Path} in
    Windows)
      # 操作系统版本
      OS_Version=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
      -M "plugins/systeminfo.bat/os${PROXY}")
      # 内核版本
      Kernel_Version=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
      -M "plugins/systeminfo.bat/kernel${PROXY}")
      # CPU核心数
      Cores_Count=$(py_sum $(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
      -M "plugins/systeminfo.bat/cpu${PROXY}"|grep -v ^$|tr '\n' ','|sed -e 's/ //g' -e 's/,$//g'))
      ;;
    Linux)
      # 操作系统版本
      OS_Version=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
      -M "plugins/systeminfo/system${PROXY}")
      # 内核版本
      Kernel_Version=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
      -M "plugins/systeminfo/kernel${PROXY}")
      # CPU核心数
      Cores_Count=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
      -M "plugins/systeminfo/cpu${PROXY}")
  esac

  # 系统启动时间
  Uptime=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
  -M "system/uptime${PROXY}"|awk -F= '{print $NF}'|sed 's/[s;]//g')
  return_code=$?
  if [ ${return_code} -eq 0 ];then
    System_status='OK'
  else
    System_status='Warning'
  fi

  # 总进程数
  Processes_Total="$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}"\
  -M "processes${PROXY}"|head -1|awk '{print $5}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata"\
  --data-binary "\
System_Info,\
Host=${Client},\
i_System_Status=${System_status},\
m_Uptime_Unit=s \
j_OS_Version=\"$(echo ${OS_Version}|sed 's/ /_/g')\",\
k_Kernel_Version=\"$(echo ${Kernel_Version}|sed 's/ /_/g')\",\
l_Uptime=${Uptime},\
n_Cores=${Cores_Count},\
o_Processes_Total=${Processes_Total}" \
&>/dev/null

  # 输出检查结果
  echo "System ${System_status}"

  # 退出脚本
  exit ${return_code}
}

check_processes(){
  # 执行检查并存储检查结果
  result=$(${ncpa} -H ${Host} -P ${Port} -t "${NCPA_Token}" -M "processes${PROXY}" -l)

  # 存储检查返回值
  return_code=$?

  # 根据检查返回值判断是否将检查结果写入Influxdb
  if [ ${return_code} -eq 0 ];then
    # 格式化检查结果并存储到临时文件
    result_file="$(py_processes_list_format "${result}")"
    # 重新定义输出信息
    result='OK.'
    # 将检查结果写入 Influxdb
    curl -s -u "${Influx_Auth}" -XPOST "http://${Influx_URL}/write?db=nagios_perfdata" --data-binary @${result_file} &>/dev/null
    # 清理临时文件
    rm -f ${result_file}
  else
    # 重新定义输出信息
    result='ERROR.'
  fi

  # 输出检查结果
  echo ${result}

  # 退出脚本
  exit ${return_code}
}

# 执行检查
case ${Node} in
  host)
    check_host
    ;;
  cpu)
    check_cpu
    ;;
  memory)
    check_mem
    ;;
  disk)
    check_disk
    ;;
  IO)
    check_IO
    ;;
  interface)
    check_interface
    ;;
  system)
    system_info
    ;;
  load)
    check_load
    ;;
  website)
    check_website
    ;;
  mysql_status)
    check_mysql_status
    ;;
  mysql_data)
    check_mysql_data
    ;;
  mysql_health)
    check_mysql_health
    ;;
  processes)
    check_processes
esac
