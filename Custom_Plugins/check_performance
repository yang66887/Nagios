#!/bin/bash

# 调用示例
# $USER1$/monitor $_HOSTPROXY$ $_SERVICENODE$ $HOSTADDRESS$ $_HOSTPORT$ $USER4$ $USER5$ $USER6$ $_SERVICEPATH$ $_SERVICEWARNING$ $_SERVICECRITICAL$ $_SERVICEUNIT$

# 插件路径
NAGIOS_PLUGINS='/data/nagios/libexec'
CHECK_NCPA="${NAGIOS_PLUGINS}/check_ncpa"

# Influxdb写入日志
INFLUX_ERROR='/data/nagios/var/influxdb.error'

# 帮助以及错误信息
dep_msg(){
  STD_OUT='Dependences Error.'
  EXIT_CODE=3
}

help_msg(){
  STD_OUT="$0 SET_PROXY NCPA_NODE NCPA_Address Port Influxdb_Address:Influxdb_Port Influxdb_User:Influxdb_Password NCPA_TOKEN NCPA_Metrics WARNING_Value CRITICAL_Value [NCPA_Unit]"
  EXIT_CODE=0
}

error_msg(){
  STD_OUT='Args Error.'
  EXIT_CODE=3
}

# 接收传参
SET_PROXY="${1}"
NCPA_NODE="${2}"
NCPA_ADDRESS="${3}"
DST_CLIENT="${4}"
NCPA_PORT="${5}"
INFLUX_URL="${6}"
INFLUX_AUTH="${7}"

# 是否使用代理
[ ${SET_PROXY} -eq 1 ] && PROXY="/${DST_CLIENT}"

# 校验传参
case ${NCPA_NODE} in
  host)
    [ $# -eq 10 ] || error_msg
    NCPA_TOKEN="${8}"
    PLUGIN="${9}"
    [ ${SET_PROXY} -eq 1 ] && PROXY="/${10}"
    ;;
  website)
    [ $# -eq 15 ] || error_msg
    NCPA_TOKEN="${8}"
    HTTP_PROXY="${9}"
    HTTP_PROTOCOL="${10}"
    HTTP_PORT="${11}"
    HTTP_AUTH="${12}"
    HTTP_URL="${13}"
    HTTP_SSL=${14}
    HTTP_NAME="${15}"
    ;;
  mysql_status)
    [ $# -eq 12 ] || error_msg
    NCPA_TOKEN="${8}"
    MYSQL_PORT="${9}"
    MYSQL_USER="${10}"
    MYSQL_PASSWORD="${11}"
    MYSQL_MODE="${12}"
    ;;
  mysql_health)
    [ $# -eq 12 ] || error_msg
    MYSQL_USER="${8}"
    MYSQL_PASSWORD="${9}"
    MYSQL_HEALTH="${10}"
    WARNING="${11}"
    CRITICAL="${12}"
    ;;
  mysql_data)
    [ $# -eq 16 ] ||error_msg
    NCPA_TOKEN="${8}"
    MYSQL_PORT="${9}"
    MYSQL_USER="${10}"
    MYSQL_PASSWORD="${11}"
    MYSQL_DATABASE="${12}"
    MYSQL_DATA="${13}"
    MYSQL_SELECT="SQL_${14}"
    MYSQL_COMMENT="${15}"
    MYSQL_UNIT="${16}"
    ;;
  cpu|memory|disk|IO|interface|system)
    [ $# -eq 12 ] || error_msg
    NCPA_TOKEN="${8}"
    NCPA_PATH="${9}"
    WARNING="${10}"
    CRITICAL="${11}"
    NCPA_UNIT="${12}"
    ;;
  load)
    [ $# -eq 11 ] || error_msg
    NCPA_TOKEN="${8}"
    WARNING="${9}"
    CRITICAL="${10}"
    PLUGIN_ARGS="$(echo _${11}|sed 's/ /_/g')"
    ;;
  processes)
    [ $# -eq 8 ] || error_msg
    NCPA_TOKEN="${8}"
esac

# 检测依赖
#[ $(${CHECK_NCPA} -V &>/dev/null;echo $?) -eq 0 ] || dep_msg
#[ $(which curl &>/dev/null;echo $?) -eq 0 ] || dep_msg
#[ $(which mysql &>/dev/null;echo $?) -eq 0 ] || dep_msg
#[ $(which /usr/bin/python &>/dev/null;echo $?) -eq 0 ] || dep_msg
#[ $(which jq &>/dev/null;echo $?) -eq 0 ] || dep_msg

# 检查是否为数字
is_digit(){
  # 传参为空 - 返回False
  [ $# -eq 0 ] && return 1

  # 将传参序列化为数组
  local str=("$@")

  # 遍历数组进行检查
  for s in ${str[@]}
  do
    # 不符合整数、浮点数、负数 - 返回False
    [[ "${s}" =~ ^-?[0-9]+(\.[0-9]+)?$ ]] || return 1
  done

  # 所有传参都符合数字格式 - 返回True
  return 0
}

# 比对数字大小
digital_compare(){
  # 检查传参个数 - 不为 3 返回Error
  [ $# -eq 3 ] || return 3

  # 检查传参是否都为数字 - 否则返回Error
  is_digit "$@" || return 3

  # 比较大小
  awk 'BEGIN{if('$1'<'$2') exit 0;else if('$1'>='$3') exit 2;else exit 1;}'
}

# 查询Influxdb
influxdb_query(){
  local measurement=$1
  local field=$2
  curl -s -u "${INFLUX_AUTH}" -G "http://${INFLUX_URL}/query?pretty=false" \
       --data-urlencode "db=nagios_perfdata" \
       --data-urlencode "q=select last(${field}) from ${measurement} where (Host='${DST_CLIENT}')" \
       -H "Connection: close"|jq -r '.results[0].series[0].values[0][1]'
}

check_host(){
  case ${PLUGIN} in
    ping)
      if [ ${SET_PROXY} -eq 0 ];then
        # 执行检查并存储检查结果
        result="$(${NAGIOS_PLUGINS}/check_ping -H${NCPA_ADDRESS} -w 3000.0,80% -c 5000.0,100% -p 5)"
        # 存储检查返回值
        local return_code=$?
      elif [ ${SET_PROXY} -eq 1 ];then
        # 执行检查并存储检查结果
        result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
        -M "plugins/nagios_plugins/check_ping/-H${DST_CLIENT}_-w3000.0,80%_-c5000.0,100%_-p5${PROXY}")
        # 存储检查返回值
        local return_code=$?
      fi
      # 0: Host Up; 1~: Host Down
      local HOST_status=${return_code}
      # 分离并存储检查结果中部分信息
      local Packet_loss=$(echo ${result}|sed 's/.*pl=\(.*\)%;.*/\1/g')
      local Response_time=$(echo ${result}|sed 's/.*rta=\(.*\)ms.*/\1/g')
      ;;
    tcp)
      if [ ${SET_PROXY} -eq 0 ];then
        # 执行检查并存储检查结果
        result="$(${NAGIOS_PLUGINS}/check_tcp -H${NCPA_ADDRESS} -p${NCPA_PORT} -t5)"
        # 存储检查返回值
        local return_code=$?
      elif [ ${SET_PROXY} -eq 1 ];then
        # 执行检查并存储检查结果
        result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
        -M "plugins/nagios_plugins/check_tcp/-H${DST_CLIENT}_-p${NCPA_PORT}${PROXY}")
        # 存储检查返回值
        local return_code=$?
      fi
      # 0: Host Up; 1~: Host Down
      local HOST_status=${return_code}
      # 分离并存储检查结果中部分信息
      if [ ${return_code} -eq 0 ];then
        local Packet_loss=0
        local Response_time=$(echo ${result}|sed 's/.*time=\(.*\)s.*/\1/g'|awk '{print $1*1000}')
      else
        local Packet_loss=100
        local Response_time=5000
      fi
      ;;
    *)
      echo error
  esac

  # 将检查结果写入 Influxdb
  curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Host_Status,\
Host=${DST_CLIENT} \
i_Status=${HOST_status},\
j_PING_Loss=${Packet_loss},\
k_PING_Unit=\"%\",\
l_Response_Time=${Response_time},\
m_Time_Unit=\"ms\"" \
-H "Connection: close" \
&>>${INFLUX_ERROR}

  # 输出内容
  STD_OUT=${result}

  # 退出码
  EXIT_CODE=${return_code}
}

check_cpu(){
  # 执行检查并存储检查结果
  result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
  -M "${NCPA_NODE}/${NCPA_PATH}${PROXY}" -q "aggregate=${NCPA_UNIT}" -w ${WARNING} -c ${CRITICAL})

  # 存储检查返回值
  local return_code=$?

  # 分离并存储检查结果中的部分数值
  local CPU_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  local CPU_percent="$(echo ${result}|awk '{print $4}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
  --data-binary "\
CPU_Usage,\
Host=${DST_CLIENT} \
i_Status=\"${CPU_status}\",\
j_Percent=${CPU_percent},\
k_Unit=\"%\"" \
-H "Connection: close" \
&>>${INFLUX_ERROR}

  # 输出内容
  STD_OUT=${result}

  # 退出码
  EXIT_CODE=${return_code}
}

check_mem(){
  # 执行检查并存储检查结果
  result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
  -M "${NCPA_NODE}/${NCPA_PATH}${PROXY}" -w ${WARNING} -c ${CRITICAL} -u ${NCPA_UNIT})

  # 存储检查返回值
  local return_code=$?

  # 分离并存储检查结果中的部分数值
  local Memory_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  local Memory_max="$(echo ${result}|awk '{print $11}')"
  local Memory_used="$(echo ${result}|awk '{print $17}')"
  local Memory_percent="$(echo ${result}|awk '{print $5}')"
  local Memory_available="$(echo ${result}|awk '{print $8}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Memory_Usage,\
Host=${DST_CLIENT} \
i_Status=\"${Memory_status}\",\
j_Max=${Memory_max},\
k_Used=${Memory_used},\
l_Available=${Memory_available},\
m_Unit=\"${NCPA_UNIT}B\",\
n_Percent=${Memory_percent},\
o_Percent_Unit=\"%\"" \
-H "Connection: close" \
&>>${INFLUX_ERROR}

  # 输出内容
  STD_OUT=${result}

  # 退出码
  EXIT_CODE=${return_code}
}

check_disk(){
  # 按照NCPA标准修改磁盘路径字符串(Linux修改 / 为 |, Windows盘符添加 :|)
  local mount_point="$(echo ${NCPA_PATH}|sed -e 's/\//|/g' -e 's/^\([a-zA-Z]\)$/\1:|/g')"

  # 执行检查并存储检查结果
  result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
  -M "${NCPA_NODE}/logical/${mount_point}${PROXY}" -w ${WARNING} -c ${CRITICAL} -u ${NCPA_UNIT})

  # 存储检查返回值
  local return_code=$?

  # 分离并存储检查结果中的部分数值
  local Disk_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  local Disk_max="$(echo ${result}|awk '{print $15}')"
  local Disk_used="$(echo ${result}|awk '{print $9}')"
  local Disk_free="$(echo ${result}|awk '{print $12}')"
  local Disk_percent="$(echo ${result}|awk '{print $6}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Disk_Usage,\
Host=${DST_CLIENT} \
i_Status=\"${Disk_status}\",\
j_Partition_Name=\"${NCPA_PATH}\",\
k_Max=${Disk_max},\
l_Used=${Disk_used},\
m_Free=${Disk_free},\
n_Unit=\"${NCPA_UNIT}B\",\
o_Used_Percent=${Disk_percent},\
p_Percent_Unit=\"%\"" \
-H "Connection: close" \
&>>${INFLUX_ERROR}

  # 输出内容
  STD_OUT=${result}

  # 退出码
  EXIT_CODE=${return_code}
}

check_IO(){
  # 分离并存储NCPA_PATH参数中的磁盘名称
  local drive="$(echo ${NCPA_PATH}|awk -F/ '{print $1}')"

  # 执行检查并存储检查结果
  result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
  -M "disk/physical/${NCPA_PATH}${PROXY}" -w ${WARNING} -c ${CRITICAL} -u ${NCPA_UNIT} -d)

  # 存储检查返回值
  local return_code=$?

  # 分离并存储检查结果中的部分数值
  local IO_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  local IO_type="$(echo ${result}|awk '{print $2}')"
  local IO_current="$(echo ${result}|awk '{print $4}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Disk_IO,\
Host=${DST_CLIENT} \
i_Status=\"${IO_status}\",\
j_Drive_Name=\"${drive}\",\
k_Type=\"${IO_type}\",\
l_Value=${IO_current},\
m_Unit=\"${NCPA_UNIT}B/s\"" \
-H "Connection: close" \
&>>${INFLUX_ERROR}

  # 输出内容
  STD_OUT=${result}

  # 退出码
  EXIT_CODE=${return_code}
}

check_interface(){
  # 执行检查并存储检查结果
  result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
  -M "${NCPA_NODE}/${NCPA_PATH}${PROXY}" -w ${WARNING} -c ${CRITICAL} -u ${NCPA_UNIT} -d)

  # 存储检查返回值
  local return_code=$?

  # 分离并存储检查结果中的部分数值
  local Traffic_status="$(echo ${result}|awk '{print $1}'|sed 's/://g')"
  local Traffic_type="$(echo ${result}|awk '{print $2}')"
  local Traffic_current="$(echo ${result}|awk '{print $4}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
  --data-binary "\
Interface_Usage,\
Host=${DST_CLIENT} \
i_Status=\"${Traffic_status}\",\
j_Type=\"${Traffic_type}\",\
k_Value=${Traffic_current},\
l_Unit=\"${NCPA_UNIT}B/s\"" \
-H "Connection: close" \
&>>${INFLUX_ERROR}

  # 输出内容
  STD_OUT=${result}

  # 退出码
  EXIT_CODE=${return_code}
}

check_load(){
  # 校验参数
  [ "X${PLUGIN_ARGS}" == 'X_NULL' ] && PLUGIN_ARGS=''

  # 执行检查并存储检查结果
  result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
  -M "plugins/nagios_plugins/check_load/-w_${WARNING}_-c_${CRITICAL}${PLUGIN_ARGS}${PROXY}")

  # 存储检查返回值
  local return_code=$?

  # 分离并存储检查结果中的部分数值
  local Load_1="$(echo ${result}|awk -F\| '{print $1}'|awk '{print $5}'|sed 's/,//g')"
  local Load_5="$(echo ${result}|awk -F\| '{print $1}'|awk '{print $6}'|sed 's/,//g')"
  local Load_15="$(echo ${result}|awk -F\| '{print $1}'|awk '{print $7}')"
  local Load_Status="$(echo ${result}|awk '{print $1}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
  --data-binary "\
CPU_Load,\
Host=${DST_CLIENT} \
i_Status=\"${Load_Status}\",\
j_Load_1=${Load_1},\
k_Load_5=${Load_5},\
l_Load_15=${Load_15}" \
-H "Connection: close" \
&>>${INFLUX_ERROR}

  # 输出内容
  STD_OUT=${result}

  # 退出码
  EXIT_CODE=${return_code}
}

check_website(){
  case ${HTTP_PROTOCOL} in
    http)
      local ARGs=''
      if [ ${SET_PROXY} -eq 0 ];then
        # 校验参数
        [ "X${HTTP_AUTH}" != "XNULL" ] && local ARGs="$(echo ${ARGs} -a${HTTP_AUTH})"
        [ "X${HTTP_URL}" != "XNULL" ] && local ARGs="$(echo ${ARGs} -u${HTTP_URL})"
        [ ${HTTP_SSL} -eq 1 ] && local ARGs="$(echo ${ARGs} -S})"
        # 执行检查并存储检查结果
        result=$(${NAGIOS_PLUGINS}/check_http -H${NCPA_ADDRESS} -p${HTTP_PORT} ${ARGs})
        # 存储检查返回值
        local return_code=$?
      elif [ ${SET_PROXY} -eq 1 ];then
        PROXY="/${HTTP_PROXY}"
        # 校验参数
        [ "X${HTTP_AUTH}" != "XNULL" ] && local ARGs="$(echo ${ARGs}_-a${HTTP_AUTH})"
        [ "X${HTTP_URL}" != "XNULL" ] && local HTTP_URL="$(echo ${HTTP_URL}|sed 's/\//|/g')" && ARGs="$(echo ${ARGs}_-u${HTTP_URL})"
        [ ${HTTP_SSL} -eq 1 ] && local ARGs="$(echo ${ARGs}_-S})"
        # 执行检查并存储检查结果
        result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
        -M "plugins/nagios_plugins/check_http/-H${DST_CLIENT}_-p${HTTP_PORT}${ARGs}${PROXY}")
        # 存储检查返回值
        local return_code=$?
      fi
      if [ $(echo ${result}|grep ^HTTP|wc -l) -eq 1 ];then
        # 分离并存储检查结果中的部分数值
        local Http_Status="$(echo ${result}|awk '{print $2}'|sed 's/://g')"
        local Http_Code="$(echo ${result}|awk '{print $4}')"
        local Response_Time="$(echo ${result}|sed 's/.*|time=\([0-9.]*\)s.*/\1/g')"
      fi
      ;;
    tcp)
      if [ ${SET_PROXY} -eq 0 ];then
        # 执行检查并存储检查结果
        result=$(${NAGIOS_PLUGINS}/check_tcp -H${NCPA_ADDRESS} -p${HTTP_PORT})
        # 存储检查返回值
        local return_code=$?
      elif [ ${SET_PROXY} -eq 1 ];then
        PROXY="/${HTTP_PROXY}"
        # 执行检查并存储检查结果
        result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
        -M "plugins/nagios_plugins/check_tcp/-H${DST_CLIENT}_-p${HTTP_PORT}${PROXY}")
        # 存储检查返回值
        local return_code=$?
      fi
      if [ ${return_code} -eq 0 ];then
        local Http_Status='OK'
        local Http_Code=200
        local Response_Time="$(echo ${result}|sed 's/.*time=\(.*\)s.*/\1/g')"
      else
        local Http_Status='CRITICAL'
        local Http_Code=500
        local Response_Time=5
      fi
  esac

  if is_digit ${Http_Code};then
    # 将检查结果写入 Influxdb
    curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
    --data-binary "\
Web_Status,\
Host=${DST_CLIENT} \
i_Status=\"${Http_Status}\",\
j_Name=\"${HTTP_NAME}\",\
k_Port=${HTTP_PORT},\
l_Protocol=\"${HTTP_PROTOCOL}\",\
m_Http_Code=${Http_Code},\
n_Response_Time=${Response_Time},\
o_Response_Time_Unit=\"s\"" \
-H "Connection: close" \
&>>${INFLUX_ERROR}
  fi

  # 输出内容
  STD_OUT=${result}

  # 退出码
  EXIT_CODE=${return_code}
}

check_mysql_status(){
  case ${SET_PROXY} in
    0)
      # 获取MySQL Status数据
      MySQL_Status="$(mysql --html --ssl-mode=disabled -h${NCPA_ADDRESS} -P${MYSQL_PORT} -u${MYSQL_USER} -p${MYSQL_PASSWORD} -e"\
show global status where Variable_name regexp '\
uptime$|\
questions|\
slow_queries|\
threads_connected|\
threads_cached|\
threads_created|\
com_commit|\
com_rollback$|\
innodb_buffer_pool_pages_dirty|\
innodb_buffer_pool_pages_free|\
innodb_buffer_pool_pages_total|\
innodb_buffer_pool_reads|\
innodb_buffer_pool_read_requests|\
bytes_sent|\
bytes_received|\
table_locks_|\
innodb_rows_';" 2>/dev/null)"
      # 记录返回值
      local return_code=$?
      # 检查返回值，MySQL OK：0
      [ ${return_code} -ne 0 ] && echo '数据库状态异常，请尽快检查！' && exit ${return_code}
      # 获取MySQL版本
      MySQL_Version="$(mysql --ssl-mode=disabled -h${NCPA_ADDRESS} -P${MYSQL_PORT} -u${MYSQL_USER} -p${MYSQL_PASSWORD} -e 'select version();' 2>/dev/null|tail -1)"
      # 获取MySQL Slave节点状态
      if [ ${MYSQL_MODE} -eq 1 ];then
        Slave_Status="$(mysql --ssl-mode=disabled -h${NCPA_ADDRESS} -P${MYSQL_PORT} -u${MYSQL_USER} -p${MYSQL_PASSWORD} -e"show slave status\G;" 2>/dev/null|grep -Eo 'Slave_.*_Running:.*|Seconds_Behind_Master:.*')"
      fi
      ;;
    1)
      # 获取MySQL Status数据
      MySQL_Status="$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}" -M "plugins/check_mysql/status/${DST_CLIENT}/${MYSQL_PORT}${PROXY}")"
      # 记录返回值
      local return_code=$?
      # 检查返回值，MySQL OK：0
      [ ${return_code} -ne 0 ] && echo '数据库状态异常，请尽快检查！' && exit ${return_code}
      # 获取MySQL版本
      MySQL_Version="$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}" -M "plugins/check_mysql/version/${DST_CLIENT}/${MYSQL_PORT}${PROXY}")"
      # 获取MySQL Slave节点状态
      if [ ${MYSQL_MODE} -eq 1 ];then
        Slave_Status="$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}" -M "plugins/check_mysql/slave/${DST_CLIENT}/${MYSQL_PORT}${PROXY}")"
      fi
  esac

  # 将MySQL Status数据格式化并导入为变量
  local MySQL_Status=$(echo ${MySQL_Status}|sed -e 's/<TR><TD>/\n/g' -e 's/<\/TD><TD>/=/g'|sed -e 's/<.*>$//g' -e '/^$/d')
  export $(echo ${MySQL_Status})

  # 拼接MySQL版本号
  local MySQL_Version="MySQL_${MySQL_Version}"

  # 检查并存储从库同步状态，主库：MYSQL_MODE = 0，从库：MYSQL_MODE = 1
  if [ ${MYSQL_MODE} -eq 1 ];then
    local Slave_Status="$(echo ${Slave_Status}|sed -e 's/: /=/g' -e 's/=\([A-Za-z]*\) /="\1" /g'|tr ' ' ',')"
  else
    local Slave_Status='Slave_IO_Running="NULL",Slave_SQL_Running="NULL",Seconds_Behind_Master=0'
  fi

  # 获取上一次检查Uptime数值
  local Last_Uptime=$(influxdb_query MySQL_Status Uptime)

  # 检查MySQL是否重启 或 InfluxDB中是否有存储MySQL Status数据
  if [ $(echo ${Uptime} ${Last_Uptime}|awk '{print $1<$2}') -eq 1 -o ${Last_Uptime} -eq 0 ];then
    # 如重启过或无数据，则将部分状态上次检查数据置零
    local Last_Uptime=0
    local Last_Bytes_received=0
    local Last_Bytes_sent=0
    local Last_Questions=0
    local Last_Slow_queries=0
    local Last_Com_commit=0
    local Last_Com_rollback=0
    local Last_Innodb_rows_read=0
    local Last_Innodb_rows_inserted=0
    local Last_Innodb_rows_deleted=0
    local Last_Innodb_rows_updated=0
  else
    # 如未重启且有数据，则获取部分状态上次检查数据
    local Last_Bytes_received=$(influxdb_query MySQL_Status Bytes_received)
    local Last_Bytes_sent=$(influxdb_query MySQL_Status Bytes_sent)
    local Last_Questions=$(influxdb_query MySQL_Status Questions)
    local Last_Slow_queries=$(influxdb_query MySQL_Status Slow_queries)
    local Last_Com_commit=$(influxdb_query MySQL_Status Com_commit)
    local Last_Com_rollback=$(influxdb_query MySQL_Status Com_rollback)
    local Last_Innodb_rows_read=$(influxdb_query MySQL_Status Innodb_rows_read)
    local Last_Innodb_rows_inserted=$(influxdb_query MySQL_Status Innodb_rows_inserted)
    local Last_Innodb_rows_deleted=$(influxdb_query MySQL_Status Innodb_rows_deleted)
    local Last_Innodb_rows_updated=$(influxdb_query MySQL_Status Innodb_rows_updated)
  fi

  # 锁表率
  local Table_locks_percent=$(echo ${Table_locks_waited} ${Table_locks_waited} ${Table_locks_immediate}|\
  awk '{printf "%0.2f\n",$1/($2+$3)*100}')

  # 每秒查询数
  local QPS=$(echo ${Questions} ${Last_Questions} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # 每秒事务数
  local TPS=$(echo ${Com_commit} ${Last_Com_commit} ${Com_rollback} ${Last_Com_rollback} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",(($1-$2)+($3-$4))/($5-$6)}')

  # 每秒慢查询数
  local Slow_queries_per_sec=$(echo ${Slow_queries} ${Last_Slow_queries} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # 每秒接收字节数
  local Bytes_received_per_sec=$(echo ${Bytes_received} ${Last_Bytes_received} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # 每秒发送字节数
  local Bytes_sent_per_sec=$(echo ${Bytes_sent} ${Last_Bytes_sent} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # InnoDB读命中率
  local Innodb_reads_hitrate=$(echo ${Innodb_buffer_pool_reads} ${Innodb_buffer_pool_read_requests}|\
  awk '{printf "%0.2f\n",(1-$1/$2)*100}')

  # InnoDB使用率
  local Innodb_use_rate=$(echo ${Innodb_buffer_pool_pages_free} ${Innodb_buffer_pool_pages_total}|\
  awk '{printf "%0.2f\n",(1-$1/$2)*100}')

  # InnoDB脏块率
  local Innodb_dirty_rate=$(echo ${Innodb_buffer_pool_pages_dirty} ${Innodb_buffer_pool_pages_total}|\
  awk '{printf "%0.2f\n",$1/$2*100}')

  # InnoDB每秒查询次数
  local Innodb_rows_read_per_sec=$(echo ${Innodb_rows_read} ${Last_Innodb_rows_read} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # InnoDB每秒插入次数
  local Innodb_rows_inserted_per_sec=$(echo ${Innodb_rows_inserted} ${Last_Innodb_rows_inserted} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # InnoDB每秒删除次数
  local Innodb_rows_deleted_per_sec=$(echo ${Innodb_rows_deleted} ${Last_Innodb_rows_deleted} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # InnoDB每秒更新次数
  local Innodb_rows_updated_per_sec=$(echo ${Innodb_rows_updated} ${Last_Innodb_rows_updated} ${Uptime} ${Last_Uptime}|\
  awk '{printf "%0.2f\n",($1-$2)/($3-$4)}')

  # 将检查结果写入 Influxdb
  curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
  --data-binary "\
MySQL_Status,\
Host=${DST_CLIENT},\
MySQL_Port=${MYSQL_PORT},\
MySQL_Mode=${MYSQL_MODE},\
MySQL_Status=${return_code} \
Uptime=${Uptime},\
MySQL_Version=\"${MySQL_Version}\",\
Questions=${Questions},\
Slow_queries=${Slow_queries},\
Slow_queries_per_sec=${Slow_queries_per_sec},\
Threads_connected=${Threads_connected},\
Threads_cached=${Threads_cached},\
Threads_created=${Threads_created},\
Table_locks_percent=${Table_locks_percent},\
Bytes_received=${Bytes_received},\
Bytes_received_per_sec=${Bytes_received_per_sec},\
Bytes_sent=${Bytes_sent},\
Bytes_sent_per_sec=${Bytes_sent_per_sec},\
Com_commit=${Com_commit},\
Com_rollback=${Com_rollback},\
Innodb_buffer_pool_pages_dirty=${Innodb_buffer_pool_pages_dirty},\
Innodb_buffer_pool_pages_free=${Innodb_buffer_pool_pages_free},\
Innodb_buffer_pool_pages_total=${Innodb_buffer_pool_pages_total},\
Innodb_buffer_pool_read_requests=${Innodb_buffer_pool_read_requests},\
Innodb_buffer_pool_reads=${Innodb_buffer_pool_reads},\
Innodb_rows_deleted=${Innodb_rows_deleted},\
Innodb_rows_inserted=${Innodb_rows_inserted},\
Innodb_rows_read=${Innodb_rows_read},\
Innodb_rows_updated=${Innodb_rows_updated},\
QPS=${QPS},\
TPS=${TPS},\
Innodb_reads_hitrate=${Innodb_reads_hitrate},\
Innodb_use_rate=${Innodb_use_rate},\
Innodb_dirty_rate=${Innodb_dirty_rate},\
Innodb_rows_read_per_sec=${Innodb_rows_read_per_sec},\
Innodb_rows_inserted_per_sec=${Innodb_rows_inserted_per_sec},\
Innodb_rows_deleted_per_sec=${Innodb_rows_deleted_per_sec},\
Innodb_rows_updated_per_sec=${Innodb_rows_updated_per_sec},\
${Slave_Status}" \
-H "Connection: close" \
&>>${INFLUX_ERROR}

  # 输出内容
  STD_OUT="Version:${MySQL_Version};Uptime:${Uptime}s;Threads_connected:${Threads_connected};Questions:${Questions};QPS:${QPS};TPS:${TPS};Slow_queries:${Slow_queries_per_sec}/s"

  # 退出码
  EXIT_CODE=${return_code}
}

check_mysql_health(){
  # 执行检查并存储检查结果
  result=$(influxdb_query MySQL_Status ${MYSQL_HEALTH})

  # 存储返回值
  local return_code=$?

  if [ ${return_code} -eq 0 ];then
    case ${MYSQL_HEALTH} in
      # 当前锁表率
      Table_locks_percent)
        digital_compare ${result} ${WARNING} ${CRITICAL}
        # 存储返回值
        local return_code=$?
        local comment="当前锁表率：${result}%"
        ;;
      # 已用连接数
      Threads_connected)
        digital_compare ${result} ${WARNING} ${CRITICAL}
        # 存储返回值
        local return_code=$?
        local comment="当前已使用连接数：${result}"
        ;;
      # 每秒慢查询
      Slow_queries_per_sec)
        digital_compare ${result} ${WARNING} ${CRITICAL}
        # 存储返回值
        local return_code=$?
        local comment="平均每秒慢查询：${result}"
        ;;
      # 从库数据与主库数据时间差
      Seconds_Behind_Master)
        digital_compare ${result} ${WARNING} ${CRITICAL}
        # 存储返回值
        local return_code=$?
        local comment="当前从库与主库数据时间差：${result}秒"
        ;;
      # 从库状态
      Slave_IO_Running|Slave_SQL_Running)
        if [ "X${result}" == "XYes" ];then
          local return_code=0
        else
          local return_code=2
        fi
        local comment="从库${MYSQL_HEALTH}状态：${result}"
    esac
  else
    local comment='查询异常，请检查service配置！'
  fi

  # 输出内容
  STD_OUT=${comment}

  # 退出码
  EXIT_CODE=${return_code}
}

check_mysql_data(){
  case ${SET_PROXY} in
    0)
      # 加载SQL语句定义文件
      source /data/nagios/etc/data_sql.list || error_msg
      # 执行查询语句并存储查询结果
      result=$(mysql -h${NCPA_ADDRESS} -P${MYSQL_PORT} -u"${MYSQL_USER}" -p"${MYSQL_PASSWORD}" -D"${MYSQL_DATABASE}" -e "${!MYSQL_SELECT}" 2>/dev/null)
      # 存储返回值
      local return_code=$?
      ;;
    1)
      # 执行查询语句并存储查询结果
      result="$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}" -M "plugins/check_mysql/data/${DST_CLIENT}/${MYSQL_PORT}/${MYSQL_DATABASE}/${MYSQL_SELECT}${PROXY}")"
      # 记录返回值
      local return_code=$?
  esac
  # 根据返回值判断查询是否成功
  if [ ${return_code} -eq 0 ];then
    # 过滤查询结果
    local result=$(echo ${result}|awk '{print $NF}'|tail -1)
    # 查询结果为数字
    if is_digit ${result};then
      # 特定SQL语句1告警条件
      if [ ${MYSQL_SELECT} == 'SQL_xxxxx' ];then
        local comment='PASS'
      # 特定SQL语句2告警条件
      elif [ ${MySQL_Select} == 'SQL_yyyy' ];then
        local comment='PASS'
      # 默认为业务数据，判定条件：查询结果为0时发送告警
      else
        local comment="${MYSQL_COMMENT}: ${result}${MYSQL_UNIT}"
        [ ${result} -eq 0 ] && local return_code=1
      fi
      # 将检查结果写入 Influxdb
      curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
      --data-binary "\
Business_Data,\
Host=${DST_CLIENT} \
i_Status=${return_code},\
j_Name=\"${MYSQL_DATA}\",\
k_Comment=\"${MYSQL_COMMENT}\",\
l_Value=${result},\
m_Unit=\"${MYSQL_UNIT}\"" \
-H "Connection: close" \
&>>${INFLUX_ERROR}
    # 查询结果为非数字
    else
      local comment='查询结果异常，请确认SQL语句是否正确！'
      local return_code=1
    fi
  # 查询失败
  else
    local comment='查询异常，请确认数据库是否启动或者SQL语句是否正确！'
    local return_code=2
  fi

  # 输出内容
  STD_OUT=${comment}

  # 退出码
  EXIT_CODE=${return_code}
}

system_info(){
  case ${NCPA_PATH} in
    Windows)
      # 操作系统版本
      OS_Version=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
      -M "plugins/systeminfo.bat/os${PROXY}")
      # 内核版本
      Kernel_Version=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
      -M "plugins/systeminfo.bat/kernel${PROXY}")
      # CPU核心数
      Cores_Count=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
      -M "plugins/systeminfo.bat/cpu${PROXY}")
      ;;
    Linux)
      # 操作系统版本
      OS_Version=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
      -M "plugins/systeminfo/system${PROXY}")
      # 内核版本
      Kernel_Version=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
      -M "plugins/systeminfo/kernel${PROXY}")
      # CPU核心数
      Cores_Count=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
      -M "plugins/systeminfo/cpu${PROXY}")
  esac

  # 系统启动时间
  Uptime=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
  -M "system/uptime${PROXY}"|awk -F= '{print $NF}'|sed 's/[s;]//g')
  local return_code=$?
  if [ ${return_code} -eq 0 ];then
    local System_status='OK'
  else
    local System_status='WARNING'
  fi

  # 总进程数
  Processes_Total="$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}"\
  -M "processes${PROXY}"|head -1|awk '{print $5}')"

  # 将检查结果写入 Influxdb
  curl -s -u "${INFLUX_AUTH}" -XPOST "http://${INFLUX_URL}/write?db=nagios_perfdata"\
  --data-binary "\
System_Info,\
Host=${DST_CLIENT} \
i_Status=\"${System_status}\",\
j_Uptime=${Uptime},\
k_Cores=${Cores_Count},\
l_Processes_Total=${Processes_Total},\
m_OS_Version=\"${OS_Version}\",\
n_Kernel_Version=\"${Kernel_Version}\"" \
-H "Connection: close" \
&>>${INFLUX_ERROR}

  # 输出内容
  STD_OUT="System ${System_status}"

  # 退出码
  EXIT_CODE=${return_code}
}

check_processes(){
  # 执行检查并存储检查结果
  result=$(${CHECK_NCPA} -H ${NCPA_ADDRESS} -P ${NCPA_PORT} -t "${NCPA_TOKEN}" -M "processes${PROXY}" -l)

  # 存储检查返回值
  local return_code=$?

  # 根据检查返回值判断是否将检查结果写入Influxdb
  if [ ${return_code} -eq 0 ];then
    # 进入缓存目录
    cd /data/nagios/var/cache
    # 检查结果缓存文件
    local BUFFER_FILE=$(date +%s%N)
    #
    echo ${result}|jq ". += {\"host\": \"${DST_CLIENT}\", \"timestamp\": ${BUFFER_FILE}}" >${BUFFER_FILE}
    # 重新定义输出信息
    local result="OK. Processes Count: $(echo ${result}|jq '.processes|length') "
  else
    # 重新定义输出信息
    local result='ERROR.'
  fi

  # 输出内容
  STD_OUT=${result}

  # 退出码
  EXIT_CODE=${return_code}
}

# 执行检查
case ${NCPA_NODE} in
  host)
    check_host
    ;;
  cpu)
    check_cpu
    ;;
  memory)
    check_mem
    ;;
  disk)
    check_disk
    ;;
  IO)
    check_IO
    ;;
  interface)
    check_interface
    ;;
  system)
    system_info
    ;;
  load)
    check_load
    ;;
  website)
    check_website
    ;;
  mysql_status)
    check_mysql_status
    ;;
  mysql_data)
    check_mysql_data
    ;;
  mysql_health)
    check_mysql_health
    ;;
  processes)
    check_processes
esac

# 等待所有子进程执行结束
wait

# 打印检查结果
echo ${STD_OUT}

# 退出脚本
exit ${EXIT_CODE}
